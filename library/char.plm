type Line = int
type Start = int
type End = int
type Location { Located(Line, Start) } 

native ("native", "js") "combinator-ffi" {
  is_alphabetic(c: char): bool
  is_alphanumeric(c: char): bool
  is_digit(c: char): bool
  is_whitespace(c: char): bool
  ffi_to_int(c: str): int
  ffi_to_float(c: str): float
  str_split(s: str, c: str): [str]
  str_index(s: str, i: int): Option<char>
  str_to_float(s: str): Option<float>
  explode(s: str): [char]
}

fn to_int(c: str): int => ffi_to_int(c)

fn implode(c: [char]): str => switch c {
  case [] => ""
  case [x, ..xs] => x.show() + implode(xs)
}

extend convertible<str, float> {
  fn convert(x) => str_to_float(x)
}

fn increase_line(loc: Location): Location => switch loc {
  case Located(line, start) => Located(line + 1, 1)
}

fn increase_col(loc: Location): Location => switch loc {
  case Located(line, col) => Located(line, col + 1)
}

fn reset_col(loc: Location): Location => switch loc {
  case Located(line, col) => Located(line, 0)
}

fn reset_line(loc: Location): Location => switch loc {
  case Located(line, col) => Located(1, col)
}

extend equality<Location> {
  fn (==) (self: Location, other: Location): bool => switch (self, other) {
    case (Located(a, b), Located(d, e)) => a == d and b == e
  }
}

extend show<Location> {
  fn show_prec(loc: Location, _) => switch loc {
    case Located(a, b) => "Located($a, $b)"
  }
}