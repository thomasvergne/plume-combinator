require "library/char"

type String = list<char>
type ParserResult<A> = (Result<A, str>, String, Location)
type Parser<A> { Parser(fn(String, Location): ParserResult<A>) }

fn run_parser<A>(parser: Parser<A>, inp: String, loc: Option<Location>): ParserResult<A> {
  switch parser {
    case Parser(f) { return f(inp, loc.or_else(Located(0, 0, 0))) }
  }
}

fn parse_error<A>(err: str): Parser<A> => 
  Parser(fn (inp, loc) => (Error(err), inp, loc))

fn parse<A>(parser: Parser<A>, inp: String): Option<A> => 
  switch run_parser(parser, inp, None) {
    case (Ok(value), ?) => Some(value)
    case (?, ?) => None
  }

extend traversable<Parser> {
  fn map<A, B>(self: Parser<A>, f: fn(A): B): Parser<B> => 
    Parser(fn (input, loc1) => switch self {
      case Parser(parser) => switch parser(input, loc1) {
        case (result, rest, loc2) => switch result {
          case Ok(value) => (Ok(f(value)), rest, loc2)
          case Error(err) => (Error(err), rest, loc2)
        }
      }
    })
}

extend monadic<Parser> {
  fn bind<A, B>(self: Parser<A>, f: fn(A): Parser<B>): Parser<B> => 
    Parser(fn (input, loc) => switch self.run_parser(input, Some(loc)) {
      case (Ok(value), rest, loc2) => f(value).run_parser(rest, Some(loc2))
      case (Error(err), rest, loc2) => (Error(err), rest, loc2)
    })
  
  fn pure<A>(value: A): Parser<A> => 
    Parser(fn (input, loc) => (Ok(value), input, loc))
}

fn satisfy(predicate: fn(char): bool): Parser<char> => 
  Parser(fn (inp, loc) {
    return switch inp {
      case [] => (Error("Unexpected end of input"), [], loc)
      case [c, ..rest] => {
        if predicate(c) {
          return (Ok(c), rest, loc.increase_col())
        } else {
          return (Error("Unexpected character $c"), inp, loc)
        }
      }
    }
  }) 

infixl 6 <|>

fn (<|>)<A>(x: Parser<A>, y: Parser<A>): Parser<A> => 
  Parser(fn (input, loc) => switch run_parser(x, input, Some(loc)) {
    case (Ok(value), rest, l) => (Ok(value), rest, l)
    case (Error(_), _, ?) => run_parser(y, input, Some(loc))
  })

fn many<A extends equality>(p: Parser<A>): Parser<[A]> =>
  (p.bind(fn (x) => 
    p.many().map(fn(xs) => [x] + xs)
  )) <|> pure([])

fn many1<A extends equality>(p: Parser<A>): Parser<[A]> =>
  p.bind(fn (x) => many(p).map(fn (xs) => [x] + xs))

fn string(s: String): Parser<String> =>
  switch s {
    case [] => pure([])
    case [c, ..cs] => 
      satisfy(fn (x) => x == c).bind(fn (_) => string(cs).map(fn (xs) => [c] + xs))
  }
  
fn character(c: char): Parser<char> => satisfy(fn (x) => x == c)

space: Parser<char> = satisfy(fn (c) => c == ' ')
space1: Parser<[char]> = many1(space)
spaces: Parser<[char]> = many(space)

newline: Parser<char> = Parser(fn(inp, loc) => switch inp {
  case ['\r', ..rest] => (Ok('\r'), rest, loc.increase_line().reset_col())
  case ['\n', ..rest] => (Ok('\n'), rest, loc.increase_line().reset_col())
  case _ => (Error("Expected newline"), inp, loc)
})

digit: Parser<char> = satisfy(is_digit)
digits: Parser<String> = many1(digit)

identifier: Parser<String> = 
  satisfy(is_alphabetic).bind(fn(c) =>
    many(satisfy(is_alphanumeric)).map(fn(cs) => [c] + cs)
  )

location: Parser<Location> = Parser(fn(_, loc) => (Ok(loc), [], loc))

fn lex<A>(p: Parser<A>): Parser<A> => 
  spaces >> p << spaces

fn sep_by<A extends equality, B>(p: Parser<A>, sep: Parser<B>): Parser<[A]> =>
  p.bind(fn(x) => 
    many(sep.and_then(p)).map(fn(xs) => [x] + xs)
  ) <|> pure([])

fn sep_by_1<A extends equality, B>(p: Parser<A>, sep: Parser<B>): Parser<[A]> =>
  p.bind(fn(x) => 
    many(sep.and_then(p)).map(fn(xs) => [x] + xs)
  )

fn many_till<A extends equality, B>(p: Parser<A>, end: Parser<B>): Parser<[A]> =>
  end.bind(fn (_) => pure([])) <|> p.bind(fn(x) => 
    many_till(p, end).map(fn(xs) => [x] + xs)
  )

anything = satisfy(fn (_) => true)

fn try<A>(p: Parser<A>): Parser<A> => 
  Parser(fn (input, loc) => switch run_parser(p, input, Some(loc)) {
    case (Ok(value), rest, loc) => (Ok(value), rest, loc)
    case (Error(err), _, ?) => (Error(err), input, loc)
  })

fn none_of(chars: String): Parser<char> => 
  satisfy(fn (c) => not (chars.elem(c)))

fn one_of(chars: String): Parser<char> => 
  satisfy(fn (c) => chars.elem(c))

extend<A extends default> boolean_algebra<Parser<A>> {
  fn not(self: Parser<A>): Parser<A> => 
    Parser(fn (input, loc) => switch run_parser(self, input, Some(loc)) {
      case (Ok(_), _, l) => (Error("Unexpected input"), input, l)
      case (Error(_), _, loc) => (Ok(default()), input, loc)
    })

  fn and(self: Parser<A>, other: Parser<A>): Parser<A> =>
    self.bind(fn (_) => other)
  
  fn or(self: Parser<A>, other: Parser<A>): Parser<A> =>
    self <|> other
}

fn optional<A>(p: Parser<A>): Parser<Option<A>> => 
  p.map(Some) <|> pure(None)

fn option<A>(p: Parser<A>, default: A): Parser<A> => 
  p <|> pure(default)

fn between<A, B, C>(p: Parser<A>, start: Parser<B>, end: Parser<C>): Parser<A> => 
  start >> p << end

interface<A> lazier<A> {
  fn lazy(self: fn(): A): A
}

extend<A> lazier<Parser<A>> {
  fn lazy(self: fn(): Parser<A>): Parser<A> => 
    Parser(fn (input, loc) => run_parser(self(), input, Some(loc)))
}

fn choice<A>(parsers: [Parser<A>]): Parser<A> => 
  switch parsers {
    case [] => parse_error("No parsers provided")
    case [p, ..ps] => p <|> choice(ps)
  }

fn many_count<A extends equality>(p: Parser<A>, i: int): Parser<list<A>> {
  if i == 0 {
    return pure([])
  }

  return p.bind(fn(res) => 
    many_count(p, i - 1).bind(fn(ress) =>
      pure([res] + ress)
    )
  )
}